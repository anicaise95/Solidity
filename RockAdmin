// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IERC2981Royalties {
    function royaltyInfo(uint256 _tokenId, uint256 _value) external view  returns (address _receiver, uint256 _royaltyAmount);
}

contract Royalties is IERC2981Royalties, ERC165{
    struct RoyaltyInfo {
        address recipient;
        uint24 amount;
    }

    mapping(uint256 => RoyaltyInfo) internal _royalties;

    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC2981Royalties).interfaceId || super.supportsInterface(interfaceId);
    }

    function _setTokenRoyalty( uint256 tokenId, address recipient, uint256 value) internal {
        require(value <= 10000, 'ERC2981Royalties: Too high');
        _royalties[tokenId] = RoyaltyInfo(recipient, uint24(value));
    }

    function royaltyInfo(uint256 tokenId, uint256 value) external view override returns (address receiver, uint256 royaltyAmount)
    {
        RoyaltyInfo memory royalties = _royalties[tokenId];
        receiver = royalties.recipient;
        royaltyAmount = (value * royalties.amount) / 10000;
    }
}

contract RockAdmin is ERC1155, Royalties, Ownable {

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;
    Counters.Counter private _realEstateIds;

    // Nom de la collection ROCK (qui apparaitra sur Opensea
    string public name = "Rock Collection";

    // Programme immo
    struct RealEstate {
        string name;        // Nom du programme immo
        string location;    // Localisation 
        string city;        // Ville
        uint256 price;      // Prix du bien
        uint256[4] supplyMaxCardType; // Supply pour chaque type de carte 
    }

     event RealEstateAdd(uint256 indexRealState);
     event SupplyUpdated(uint256 indexRealState);
     event CardsMinted(uint256 indexRealState);
     
    /*
    struct NFT {
      uint256 nftId;
      address payable owner;
      //address payable ;
      uint256 price;
      bool sold;
    }*/

    //NFT[] ntfs;

    // Patrimoine immobilier (collection des NFT)
    RealEstate[] public realEstatesCollection;

    // Type de carte
    uint256 public constant CARD_COTTAGE = 0;
    uint256 public constant CARD_VILLA = 1;
    uint256 public constant CARD_MANSION = 2;
    uint256 public constant CARD_HIGH_RISE = 3;

    // Répartion des tokens par type de carte
    uint256 public constant DEFAULT_RATIO_COTTAGE_TOKENS = 50;
    uint256 public constant DEFAULT_RATIO_VILLA_TOKENS = 30;
    uint256 public constant DEFAULT_RATIO_MANSION_TOKENS = 20;

    // Répartion des tokens par type de carte
    uint256 public constant DEFAULT_MAX_SUPPLY_COTTAGE = 10000;
    uint256 public constant DEFAULT_MAX_SUPPLY_VILLA = 1000;
    uint256 public constant DEFAULT_MAX_SUPPLY_MANSION = 100;
    uint256 public constant DEFAULT_MAX_SUPPLY_HIGH_RISE = 1;

    constructor() ERC1155("https://gateway.pinata.cloud/ipfs/QmYF4vRAZg19ARiSFoXevZYkf9Zp1yVdgXhh4x22bypMc4/{id}.json") {}

     function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, Royalties) returns (bool){
        return super.supportsInterface(interfaceId);
    }

    function MintRock(address _contractOwner, uint256 typeCard, RealEstate memory newRealEstateToMint) public returns (uint256)
    {
        _tokenIds.increment();

        uint256 newItemId = _tokenIds.current();

        if(typeCard == CARD_COTTAGE)
         _mint(_contractOwner, typeCard, newRealEstateToMint.supplyMaxCardType[CARD_COTTAGE] , "");
        if(typeCard == CARD_VILLA)
         _mint(_contractOwner, typeCard, newRealEstateToMint.supplyMaxCardType[CARD_VILLA] , "");
        if(typeCard == CARD_MANSION)
         _mint(_contractOwner, typeCard, newRealEstateToMint.supplyMaxCardType[CARD_MANSION] , "");
        if(typeCard == CARD_HIGH_RISE)
         _mint(_contractOwner, typeCard, newRealEstateToMint.supplyMaxCardType[CARD_HIGH_RISE] , "");

        _setTokenRoyalty(newItemId, msg.sender, 1000);
 
        return newItemId;
    }

    // Pour chaque bien immo, calcul de la sypply pour chaque type de carte 
    // TODO : vérifier les divisions (*1000) voir pour arrondir au supérieur    
    // TODO : vérifier controle require sur ratio > 0
    function calculeSupply(uint256 _realEstatePrice, uint256 _tokenPrice, uint256 _ratioToken) internal pure returns (uint256){
        uint256 supplyToken = ((_realEstatePrice * _ratioToken) / _tokenPrice);
        return supplyToken;
    }

    // L'administrateur déclare un nouveau bien immo
    // Retourne la position du bien immo dans le tableau
    // TODO faire les require sur les string
    function addRealEstate(string memory _name, string memory _location, string memory _city, uint _price) public onlyOwner {
        require(keccak256(abi.encode(_name)) != keccak256(abi.encode("")), "Le nom du programme immobilier est obligatoire");
        require(keccak256(abi.encode(_location)) != keccak256(abi.encode("")), "La situation est obligatoire");
        require(keccak256(abi.encode(_city)) != keccak256(abi.encode("")), "La ville est obligatoire");
        require(_price > 0, "Erreur, le prix du bien immo doit etre superieur a O");
        
        _realEstateIds.increment();

        // Définition du nouveau bien
        RealEstate memory newRealEstate;
        newRealEstate.name = _name;
        newRealEstate.location = _location;
        newRealEstate.city = _city;
        newRealEstate.price = _price;
        newRealEstate.supplyMaxCardType = [DEFAULT_MAX_SUPPLY_COTTAGE, DEFAULT_MAX_SUPPLY_VILLA, DEFAULT_MAX_SUPPLY_MANSION, DEFAULT_MAX_SUPPLY_HIGH_RISE];

        // Ajout du bien au catalogue
        realEstatesCollection[_realEstateIds.current()] = newRealEstate;

        // Evenement RealEstateAdd avec position de l'élément dans le tableau  
        emit RealEstateAdd(_realEstateIds.current() - 1);
    }

    // L'administrateur déclare un nouveau bien immo
    // Retourne la position du bien immo dans le tableau
    // TODO faire les require sur les string
    function updateSuppliesCard (uint8 _indexRealEstateInCollection, bool _isDefaultSupply, uint8 _ratioTokenCottage, uint8 _ratioTokenVilla, uint8 _ratioTokenMansion, uint256 _prixTokenCottage, uint256 _prixTokenVilla, uint256 _prixTokenHighRise) public onlyOwner {
        require(_isDefaultSupply || (!_isDefaultSupply && (_ratioTokenCottage > 0 && _ratioTokenVilla > 0 && _ratioTokenMansion > 0)), unicode"Erreur, un des pourcentages est a 0");

        if(_ratioTokenCottage + _ratioTokenVilla + _ratioTokenMansion != 100){
            revert("Erreur, le pourcentage total doit faire 100%");
        }

        // Récupère le bien immo à la position indiquée
        RealEstate memory realEstate = realEstatesCollection[_indexRealEstateInCollection]; 
        uint256[4] memory estimatedSupply;

        if(_isDefaultSupply) {
            estimatedSupply[CARD_COTTAGE]   = calculeSupply(realEstate.price, _prixTokenCottage, DEFAULT_RATIO_COTTAGE_TOKENS);
            estimatedSupply[CARD_VILLA]     = calculeSupply(realEstate.price, _prixTokenVilla, DEFAULT_RATIO_VILLA_TOKENS);
            estimatedSupply[CARD_MANSION]   = calculeSupply(realEstate.price, _prixTokenHighRise, DEFAULT_RATIO_MANSION_TOKENS);
            estimatedSupply[CARD_HIGH_RISE] = 1;
        } else {
            estimatedSupply[CARD_COTTAGE]   = calculeSupply(realEstate.price, _prixTokenCottage, _ratioTokenCottage);
            estimatedSupply[CARD_VILLA]     = calculeSupply(realEstate.price, _prixTokenVilla, _ratioTokenVilla);
            estimatedSupply[CARD_MANSION]   = calculeSupply(realEstate.price, _prixTokenHighRise, _ratioTokenMansion);
            estimatedSupply[CARD_HIGH_RISE] = 1;
        }
        realEstate.supplyMaxCardType = estimatedSupply;

        // Ajout du bien au catalogue
        realEstatesCollection[_indexRealEstateInCollection] = realEstate;

        emit SupplyUpdated(_indexRealEstateInCollection);
    }

    // L'administrateur minte les NFTS d'une collection (d'un bien immo)
    function mintRealEstate(uint _indexRealEstateInCollection) public onlyOwner {

        // Récupère le bien immo à la position indiquée
        RealEstate memory newRealEstateToMint = realEstatesCollection[_indexRealEstateInCollection];   

        // L'administrateur minte les SFT du bien immobilier
        MintRock(msg.sender, CARD_COTTAGE, newRealEstateToMint);
        MintRock(msg.sender, CARD_VILLA, newRealEstateToMint);
        MintRock(msg.sender, CARD_MANSION, newRealEstateToMint);
        MintRock(msg.sender, CARD_HIGH_RISE, newRealEstateToMint);

        emit CardsMinted(_indexRealEstateInCollection);
    }
}
