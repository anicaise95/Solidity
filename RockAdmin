// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/introspection/ERC165.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
//import "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol";

/*
interface IERC2981Royalties {
    function royaltyInfo(uint256 _tokenId, uint256 _value) external view  returns (address _receiver, uint256 _royaltyAmount);
}

contract Royalties is IERC2981Royalties, ERC165{
    struct RoyaltyInfo {
        address recipient;
        uint24 amount;
    }

    mapping(uint256 => RoyaltyInfo) internal _royalties;

    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC2981Royalties).interfaceId || super.supportsInterface(interfaceId);
    }

    function _setTokenRoyalty( uint256 tokenId, address recipient, uint256 value) internal {
        require(value <= 10000, 'ERC2981Royalties: Too high');
        _royalties[tokenId] = RoyaltyInfo(recipient, uint24(value));
    }

    function royaltyInfo(uint256 tokenId, uint256 value) external view override returns (address receiver, uint256 royaltyAmount)
    {
        RoyaltyInfo memory royalties = _royalties[tokenId];
        receiver = royalties.recipient;
        royaltyAmount = (value * royalties.amount) / 10000;
    }
}
*/
//contract RockAdmin is ERC1155, Royalties, Ownable {
contract RockAdmin is ERC1155, Ownable {

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;
    Counters.Counter private _realEstateIds;

    // Nom de la collection ROCK (qui apparaitra sur Opensea
    string public name = "Rock Collection";

    // Programme immo
    struct RealEstate {
        string name;        // Nom du programme immo
        string location;    // Localisation 
        string city;        // Ville
        uint256 price;      // Prix du bien
        uint256[4] supplyMaxCardType; // Supply pour chaque type de carte 
    }

     event RealEstateAdd(uint256 indexRealState);
     event SupplyUpdated(uint256 indexRealState);
     event CardsMinted(uint256 indexRealState);
    

    struct NFTMarketItem{
        uint256 tokenId;
        uint256 nftId;
        uint256 amount;
        uint256 price;
        uint256 royalty;
        address payable seller;
        address payable owner;
        bool sold;
    }

    NFTMarketItem[] Nfts;

    // Patrimoine immobilier (collection des NFT)
    RealEstate[] public realEstatesCollection;

    // Type de carte
    uint256 public constant CARD_COTTAGE = 0;
    uint256 public constant CARD_VILLA = 1;
    uint256 public constant CARD_MANSION = 2;
    uint256 public constant CARD_HIGH_RISE = 3;

    // Répartion des tokens par type de carte
    uint256 public constant DEFAULT_RATIO_COTTAGE_TOKENS = 50;
    uint256 public constant DEFAULT_RATIO_VILLA_TOKENS = 30;
    uint256 public constant DEFAULT_RATIO_MANSION_TOKENS = 20;

    // Répartion des tokens par type de carte
    uint256 public constant DEFAULT_MAX_SUPPLY_COTTAGE = 10000;
    uint256 public constant DEFAULT_MAX_SUPPLY_VILLA = 1000;
    uint256 public constant DEFAULT_MAX_SUPPLY_MANSION = 100;
    uint256 public constant DEFAULT_MAX_SUPPLY_HIGH_RISE = 1;

    constructor() ERC1155("https://gateway.pinata.cloud/ipfs/QmYF4vRAZg19ARiSFoXevZYkf9Zp1yVdgXhh4x22bypMc4/{id}.json") {}

     /*function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, Royalties) returns (bool){
        return super.supportsInterface(interfaceId);
    }*/

    function MintRock(address _contractOwner, uint256 typeCard, uint _indexRealEstateInCollection) public returns (uint256)
    {
       
        _tokenIds.increment();

        uint256 _id = _tokenIds.current();

        _mint(_contractOwner, _id, realEstatesCollection[_indexRealEstateInCollection].supplyMaxCardType[typeCard] , "");

        
        /*_tokenIds.increment();
        _mint(_contractOwner, CARD_VILLA, realEstatesCollection[_indexRealEstateInCollection].supplyMaxCardType[CARD_VILLA] , "");
        _mint(_contractOwner, CARD_MANSION, realEstatesCollection[_indexRealEstateInCollection].supplyMaxCardType[CARD_MANSION] , "");
        _mint(_contractOwner, CARD_HIGH_RISE, realEstatesCollection[_indexRealEstateInCollection].supplyMaxCardType[CARD_HIGH_RISE] , "");*/



        //_setTokenRoyalty(newItemId, msg.sender, 1000);
 
        return _id;
    }

    // L'administrateur déclare un nouveau bien immo
    // Retourne la position du bien immo dans le tableau
    // TODO faire les require sur les string
    function addRealEstate(string memory _name, string memory _location, string memory _city, uint _price) public onlyOwner {
        require(keccak256(abi.encode(_name)) != keccak256(abi.encode("")), "Le nom du programme immobilier est obligatoire");
        require(keccak256(abi.encode(_location)) != keccak256(abi.encode("")), "La situation est obligatoire");
        require(keccak256(abi.encode(_city)) != keccak256(abi.encode("")), "La ville est obligatoire");
        require(_price > 0, "Erreur, le prix du bien immo doit etre superieur a O");
        
        _realEstateIds.increment();

        // Définition du nouveau bien
        RealEstate memory newRealEstate;
        newRealEstate.name = _name;
        newRealEstate.location = _location;
        newRealEstate.city = _city;
        newRealEstate.price = _price;
        newRealEstate.supplyMaxCardType = [DEFAULT_MAX_SUPPLY_COTTAGE, DEFAULT_MAX_SUPPLY_VILLA, DEFAULT_MAX_SUPPLY_MANSION, DEFAULT_MAX_SUPPLY_HIGH_RISE];

        // Ajout du bien au catalogue
        realEstatesCollection.push(newRealEstate);

        // Evenement RealEstateAdd avec position de l'élément dans le tableau  
        emit RealEstateAdd(_realEstateIds.current() - 1);
    }

    // L'administrateur déclare un nouveau bien immo
    // Retourne la position du bien immo dans le tableau
    // TODO faire les require sur les string
    function updateSuppliesCard (uint8 _indexRealEstateInCollection, bool _isDefaultSupply, uint8 _ratioTokenCottage, uint8 _ratioTokenVilla, uint8 _ratioTokenMansion, uint256 _prixTokenCottage, uint256 _prixTokenVilla, uint256 _prixTokenMansion, uint256 _prixTokenHighRise) public onlyOwner {
        require(_isDefaultSupply || (!_isDefaultSupply && (_ratioTokenCottage > 0 && _ratioTokenVilla > 0 && _ratioTokenMansion > 0)), unicode"Erreur, un des pourcentages est a 0");

        // Récupère le bien immo à la position indiquée
        uint256[4] memory estimatedSupply = realEstatesCollection[_indexRealEstateInCollection].supplyMaxCardType;
        uint256 price = realEstatesCollection[_indexRealEstateInCollection].price;

        if(_isDefaultSupply) {
            estimatedSupply[CARD_COTTAGE]   = getNumberOfTokenToMint(price, _prixTokenCottage, DEFAULT_RATIO_COTTAGE_TOKENS, _prixTokenHighRise);
            estimatedSupply[CARD_VILLA]     = getNumberOfTokenToMint(price, _prixTokenVilla, DEFAULT_RATIO_VILLA_TOKENS, _prixTokenHighRise);
            estimatedSupply[CARD_MANSION]   = getNumberOfTokenToMint(price, _prixTokenMansion, DEFAULT_RATIO_MANSION_TOKENS, _prixTokenHighRise);
            estimatedSupply[CARD_HIGH_RISE] = 1;
        } else {
            estimatedSupply[CARD_COTTAGE]   = getNumberOfTokenToMint(price, _prixTokenCottage, _ratioTokenCottage, _prixTokenHighRise);
            estimatedSupply[CARD_VILLA]     = getNumberOfTokenToMint(price, _prixTokenVilla, _ratioTokenVilla, _prixTokenHighRise);
            estimatedSupply[CARD_MANSION]   = getNumberOfTokenToMint(price, _prixTokenMansion, _ratioTokenMansion, _prixTokenHighRise);
            estimatedSupply[CARD_HIGH_RISE] = 1;
        }
        realEstatesCollection[_indexRealEstateInCollection].supplyMaxCardType = estimatedSupply;

        emit SupplyUpdated(_indexRealEstateInCollection);
    }

    // Pour chaque bien immo, calcul du nombre de token à minter pour chaque type de carte 
    // TODO : vérifier les divisions (*1000) voir pour arrondir au supérieur    
    // TODO : vérifier controle require sur ratio > 0
    /// _realEstatePrice : Prix du bien immobilier à tokeniser (ex : 1 000 000 €)
    /// _tokenPrice : prix de la carte spécifiée par l'administrateur (ex : 50 €)
    /// _realEstatePriceRatio : Purcentage du prix du bien concerné (50%)
    /// SUr 50% du prix du bien (1 000 000 €), l'administrateur souhaite calculer le nombre de token de 50 € (supply)
    function getNumberOfTokenToMint(uint256 _realEstatePrice, uint256 _tokenPrice, uint256 _realEstatePriceRatio, uint _prixTokenHighRise) public view onlyOwner returns (uint256){
        require(_realEstatePrice >= 50000, "Erreur, le prix minimum du bien immobilier est de 50000");
        require(_tokenPrice >= 50, "Erreur, le prix minimum de vente est 50");
        require(_realEstatePriceRatio <= 100, "Erreur, le pourcentage doit etre inferieur a 100 pourcents");
        
        uint price = _realEstatePrice - (DEFAULT_MAX_SUPPLY_HIGH_RISE * _prixTokenHighRise); // Pour le calcul de la supply, on retire du prix du bien, le prix du token unique HighRise
        uint ratioMultiplier = _realEstatePriceRatio * 100;
        uint256 value = price * ratioMultiplier / 10000;
        uint256 supplyToken = value / _tokenPrice;

        return supplyToken;
    }

    // L'administrateur minte les NFTS d'une collection (d'un bien immo)
    function mintRealEstate(uint _indexRealEstateInCollection) public onlyOwner {

        // Récupère le bien immo à la position indiquée
        //RealEstate memory newRealEstateToMint = realEstatesCollection[_indexRealEstateInCollection];   

        // L'administrateur minte les SFT du bien immobilier
        MintRock(msg.sender, CARD_COTTAGE, _indexRealEstateInCollection);

        MintRock(msg.sender, CARD_VILLA, _indexRealEstateInCollection);

        MintRock(msg.sender, CARD_MANSION, _indexRealEstateInCollection);

        MintRock(msg.sender, CARD_HIGH_RISE, _indexRealEstateInCollection);

        emit CardsMinted(_indexRealEstateInCollection);
    }
}
